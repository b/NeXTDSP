#
# NeXT Makefile to build the meta-shlib libmusic
#
# Note that the "project" here is just libmusic,
# not including the subprojects.  (They are separate
# projects which will be installed first.)  Therefore,
# the make targets installsrc, clean, all, and install
# do not include the subprojects.  However, for convenience,
# other make targets do recurse through the subprojects.
# "make all" resurses only as a check to see that the 
# ofiles of the subprojects still exist, and will make
# them if they don't.

# Modification history:
#    daj/May 11,90 - Removed soft link in make shlib, since it was causing
#		    problems. Uncommented the -seglinkedit options in
#		    the shlib: target.
#   5/11/90/jos - added install_all target for recursive install
#   5/13/90/daj - added force_version to install target
#                   Commented in /usr/local/shlib install again to see if
#	            I can get it to work
#                   Fixed make current_links. 
#   5/14/90/daj - Moved relnotes_install from musickit Makefile to here.
#                   Also moved MusicKitNotes.wn to here, etc.
#   5/14/90/jos - Placed a "-" in front of the links so they won't terminate
#		  the build when the links already exist.
#   5/16/90/daj - Added freeze_project target. Please do this just before
#		  doing a freeze_vers (or new_vers)
#                 Also added a thaw_project. Do this after creating a new
#                 version, on that version.	
#   5/24/90/daj - Changed release notes to .rtf version.
#   6/6/90/daj - Added objc_order
#   6/10/90/daj - Removed profile_ofiles from profile target
#   7/30/90/daj - Added <project>.user_bom writing
#   7/30/90/daj - Removed objc_order


# Where host shared library gets installed
LIBDIR = /usr/lib

# Where target shared library gets installed
SHLIBDIR = /usr/shlib

# Where release notes get installed
DOCDIR = /usr/local/doc/libmusic_proj

# The major version of this shared library
SHLIBVERS = A

# This uses the strip -S option
SHLIBIFLAGS = -sS

# file generated by vers_string
VERSFILE = vers

RELNOTES = MusicKitNotes.rtf

USERBOM = libmusic.user_bom

# defines passed on to musickit
# disable this for release!!!
# EXTERNAL_DEFINES = -DDEBUG

EXTERNAL_DEFINES =

# Symbolic links to the directories which contain the projects that make up
# this meta-shlib
PROJDIRS = musickit unitgenerators synthpatches

MKSHLIBFLAGS = 
HFILES = shlib.h
CFILES = pointers.c
SFILES = alias.s
OTHER_SRCS = Makefile spec_music $(RELNOTES) $(USERBOM)

SRCS = $(CFILES) $(SFILES) $(HFILES) $(OTHER_SRCS)
OFILES = $(CFILES:.c=.o) $(SFILES:.s=.o) $(VERSFILE).o

# at the top so that its the default
develop_all: musickit fast_shlib

all: current_links shlib_ofiles shlib profile_ofiles profile

install_debug_shlib: DSTROOT $(DSTROOT)$(LIBDIR) $(DSTROOT)$(SHLIBDIR) \
		current_links shlib_ofiles shlib
	/bin/cp libmusic_s.a $(DSTROOT)$(LIBDIR)
	ranlib $(DSTROOT)$(LIBDIR)/libmusic_s.a
	/bin/cp libmusic_s.$(SHLIBVERS).shlib $(DSTROOT)$(SHLIBDIR)

install_shlib: DSTROOT $(DSTROOT)$(LIBDIR) $(DSTROOT)$(SHLIBDIR) \
		current_links shlib_ofiles shlib
	install -m 444 libmusic_s.a $(DSTROOT)$(LIBDIR)/libmusic_s.a
	install $(SHLIBIFLAGS) -m 555 libmusic_s.$(SHLIBVERS).shlib \
		$(DSTROOT)$(SHLIBDIR)/libmusic_s.$(SHLIBVERS).shlib
	mkdirs $(DSTROOT)/usr/local/shlib
	-/bin/rm -f $(DSTROOT)/usr/local/shlib/libmusic_s.$(SHLIBVERS).shlib
	-ln -s ../src/libmusic/libmusic_s.$(SHLIBVERS).shlib \
		$(DSTROOT)/usr/local/shlib/libmusic_s.$(SHLIBVERS).shlib

install: force_version install_shlib profile_ofiles profile relnotes_install userbom_install
	install -m 444 libmusic_p.a $(DSTROOT)$(LIBDIR)/libmusic_p.a

SRCROOT DSTROOT:
	@if [ -n "${$@}" ]; \
	then \
		exit 0; \
	else \
		echo Must define $@; \
		exit 1; \
	fi

$(DSTROOT)$(LIBDIR) $(DSTROOT)$(SHLIBDIR) $(DSTROOT)$(DOCDIR):
	mkdirs $@

shlib_ofiles: 
	for i in `echo ${PROJDIRS}`; \
	  do \
		echo ================= make $@ for $$i =================; \
		( SHLIBIDIR=`pwd`; \
		cd ./lib$${i}; ${MAKE} SHLIBIDIR=$$SHLIBIDIR \
			EXTERNAL_DEFINES="$(EXTERNAL_DEFINES)" $@ ) ; \
	  done

shlib: $(OFILES) shlib_ofiles
	mkshlib $(MKSHLIBFLAGS) -s spec_music \
		-t libmusic_s.$(SHLIBVERS).shlib -h libmusic_s.a \
		-minor_version `vers_string -n` \
		-seglinkedit  \
		-segprot __LINKEDIT rwx r \
		-segaddr __LINKEDIT 80a8000 \
	        -sectorder_detail
	ranlib libmusic_s.a

fast_shlib: $(OFILES)
	mkshlib -f $(MKSHLIBFLAGS) -s spec_music \
		-seglinkedit \
		-segprot __LINKEDIT rwx r \
		-segaddr __LINKEDIT 80a8000 \
		-t libmusic_s.$(SHLIBVERS).shlib -h libmusic_s.a \
		-minor_version `vers_string -n`

#	       -segaddr __LINKEDIT 07100000

shlib_clean: 
	for i in `echo ${PROJDIRS}`; \
	  do \
		echo ================= make $@ for $$i =================; \
		(cd ./lib$${i}; /bin/rm -rf shlib_obj) \
	  done

profile_ofiles: 
	for i in `echo ${PROJDIRS}`; \
	  do \
		echo ================= make $@ for $$i =================; \
		(cd ./lib$${i}; ${MAKE} EXTERNAL_DEFINES="$(EXTERNAL_DEFINES)" $@); \
	  done

profile: $(VERSFILE).o
	rm -f libmusic_p.a
	for i in `echo ${PROJDIRS}`; \
	  do \
		ar cr libmusic_p.a ./lib$${i}/profile_obj/*.o; \
	  done
	ar cr libmusic_p.a $(VERSFILE).o
	ranlib libmusic_p.a

profile_clean: 
	for i in `echo ${PROJDIRS}`; \
	  do \
		echo ================= make $@ for $$i =================; \
		(cd ./lib$${i}; /bin/rm -rf profile_obj) \
	  done

debug_ofiles: 
	for i in `echo ${PROJDIRS}`; \
	  do \
		echo ================= make $@ for $$i =================; \
		(cd ./lib$${i}; ${MAKE} EXTERNAL_DEFINES="$(EXTERNAL_DEFINES)" $@); \
	  done

debug: $(VERSFILE).o debug_ofiles
	rm -f libmusic_g.a
	for i in `echo ${PROJDIRS}`; \
	  do \
		ar cr libmusic_g.a ./lib$${i}/debug_obj/*.o; \
	  done
	ar cr libmusic_g.a $(VERSFILE).o
	ranlib libmusic_g.a

debug_clean: 
	for i in `echo ${PROJDIRS}`; \
	  do \
		echo ================= make $@ for $$i =================; \
		(cd ./lib$${i}; /bin/rm -rf debug_obj) \
	  done

clean:
	-rm -f $(OFILES) $(VERSFILE).c
	-rm -f libmusic_s.a libmusic_s.*.shlib
	-rm -f libmusic_p.a
	-rm -f libmusic_g.a

clean_all: clean shlib_clean profile_clean debug_clean

installsrc:
	mkdirs -m 775 $(SRCROOT)
	tar cf - $(SRCS) | (cd $(SRCROOT); tar xf -)

installsrc_all: installsrc
	for i in `echo ${PROJDIRS}`; \
	  do \
	    echo =============== make installsrc for $$i ===============; \
	    ( cd ./lib$${i}; \
		${MAKE} installsrc SRCROOT=$(SRCROOT)/../$${i}-0); \
	    (cd $(SRCROOT)/..; ln -s $${i}-0 $${i}); \
	  done

install_subs: current_links
	for i in `echo ${PROJDIRS}`; \
	  do \
		echo ================ make install for $$i ================; \
		( cd ./lib$${i}; ${MAKE} install DSTROOT=$(DSTROOT) ) ; \
	  done

shlib_install_all: install_subs shlib_install

install_all: install_subs install

installdoc: $(DSTROOT) $(DSTROOT)$(DOCROOT)
	install -m 444 notes $(DSTROOT)$(DOCROOT)


# This is only really useful when we're installing on Kodak. On kodak, there's
# always a link from musickit to the current version. 
# In order to make this work correctly on dspdev, you have to install, by
# hand a link on libmusic to the most recent versions of the project.
# Note that it is NOT correct to hardwire a ../../musickit_proj/musickit here!
# - DAJ
current_links:
	if [ -f PROJECT_FROZEN ]; then exit 1; fi
	-rm -f libmusickit libsynthpatches libunitgenerators
	-ln -s ../`ls -l ../musickit | awk '{print $$10}'` libmusickit
	-ln -s ../`ls -l ../unitgenerators | awk '{print $$10}'` libunitgenerators
	-ln -s ../`ls -l ../synthpatches | awk '{print $$10}'` libsynthpatches

# rules to make version files
$(VERSFILE).c:
	vers_string -l libmusic > $@

force_version::
	-/bin/rm -f $(VERSFILE).c

userbom_install:
	if [ -f $(USERBOM) ]; \
	then \
	    mkdirs ${DSTROOT}/usr/local/BOMs ; \
	    install -m 444 $(USERBOM) ${DSTROOT}/usr/local/BOMs ; \
	fi

relnotes_install:
	if [ -f $(RELNOTES) ]; \
	then \
	    mkdirs ${DSTROOT}/usr/local/RelNotes ; \
	    install -m 444 $(RELNOTES) ${DSTROOT}/usr/local/RelNotes ; \
	fi

PROJECTS_OWNER = ~dspdev

freeze_project:
	if [ -f PROJECT_FROZEN ]; then exit 1; fi
	-ln -s $(PROJECTS_OWNER)/musickit_proj/`ls -l $(PROJECTS_OWNER)/musickit_proj/musickit | awk '{print $$10}'` libmusickit.frozen
	-ln -s $(PROJECTS_OWNER)/unitgenerators_proj/`ls -l $(PROJECTS_OWNER)/unitgenerators_proj/unitgenerators | awk '{print $$10}'` libunitgenerators.frozen
	-ln -s $(PROJECTS_OWNER)/synthpatches_proj/`ls -l $(PROJECTS_OWNER)/synthpatches_proj/synthpatches | awk '{print $$10}'` libsynthpatches.frozen
	-rm -f PROJECT_FROZEN
	ls -ld *.frozen | cat > PROJECT_FROZEN	

thaw_project:
	-chmod +w PROJECT_FROZEN
	-rm PROJECT_FROZEN
	-chmod +w libmusickit.frozen
	-rm libmusickit.frozen
	-chmod +w libunitgenerators.frozen
	-rm libunitgenerators.frozen
	-chmod +w libsynthpatches.frozen
	-rm libsynthpatches.frozen
