/* 
 * Copyright (c) 1989 NeXT, Inc.
 * 24-May-89  Gregg Kellogg (gk) at NeXT
 *	Created.
 *
 */

/*
 * interface for requests to either the MIDI timer port.
 */
subsystem midi_timer 800;

#include <std_types.defs>

type timeval_t = struct[2] of int;
type u_int = int;

import <midi/midi_types.h>;

waittime 10000;
serverprefix midi_;

/*
 * Timer services can be requested either using seconds/microseconds or
 * timer-specific quanta.  Additionally, a timer can be relative to the
 * current time, or at an absolute time.
 * The server will send a message when either the timer expires, or some
 * other timer event occures (timer stopped, timeflow direction changed,
 * timer value reset.
 * Only one timer per reply port can be outstanding at any given time.
 */
simpleroutine timer_timeval_req (	// request a message at specified time
	timer_port	: port_t;	// timer service port
	reply_port	: port_t;	// where to send timer event to
	timeval		: timeval_t;	// secs/usecs of (until) request
	relative_time	: boolean_t);	// relative (!absolute) timer

simpleroutine timer_quanta_req (	// request a message at specified time
	timer_port	: port_t;	// timer service port
	reply_port	: port_t;	// where to send timer event to
	quanta		: int;		// quanta of (until) request
	relative_time	: boolean_t);	// relative (!absolute) timer

routine timer_set (			// set timer value
	timer_port	: port_t;	// timer service port
	control_port	: port_t;	// timer control port (for permission)
	timeval		: timeval_t);	// time to set timer to

routine timer_set_quantum (		// set # uscs/quantum
	timer_port	: port_t;	// timer service port
	control_port	: port_t;	// timer control port (for permission)
	usec_per_quantum: u_int);	// # usecs/quantum

routine timer_stop (			// stop timer from running
	timer_port	: port_t;	// timer service port
	control_port	: port_t);	// timer control port (for permission)

routine timer_start (			// set timer  running
	timer_port	: port_t;	// timer service port
	control_port	: port_t);	// timer control port (for permission)

routine timer_direction (		// specify timer direction
	timer_port	: port_t;	// timer service port
	control_port	: port_t;	// timer control port (for permission)
	forward		: boolean_t);	// forward (!reverse)

