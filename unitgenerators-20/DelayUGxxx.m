/* This class was auto-generated by dspwrap from macro delay. 
   It should not be edited. */

#import "DelayUGxxx.h"

@implementation DelayUGxxx : DelayUG

/* times in seconds/sample */
#define COMPUTETIME (276 * (DSP_CLOCK_PERIOD / DSPMK_I_NTICK))
#define OFFCHIP_COMPUTETIME (416 * (DSP_CLOCK_PERIOD / DSPMK_I_NTICK))

static MKLeafUGStruct _leafUGStruct = {
    {3/* xArg  */,  2/* yArg  */,  0/* lArg */,
     17/* pLoop */,  0/* pSubr */,
     0/* xData */,  0/* yData */} /* memory requirements */, COMPUTETIME};

+(MKLeafUGStruct *)classInfo  
{   if (_leafUGStruct.master == NULL)
      _leafUGStruct.master = [self masterUGPtr];
    return &_leafUGStruct; }

+initialize /* Sent once on factory start-up. */
{
enum args { ainp, aout, pdel, adel, edel };
   static DSPMemorySpace _argSpaces[] = {DSP_MS_X,DSP_MS_X,DSP_MS_X,DSP_MS_X,DSP_MS_X};
   static DSPDataRecord _dataRecP = {NULL, DSP_LC_P, 0, 1, 17}; 
   static int _dataP[] = {0x66d800,0x61d800,0x65e000,0x4edc00,0x4fdc00,
                          0x22ae00,0x61080,0x8f,0x200055,0x21070,
                          0x21d500,0x56d900,0x57e500,0x565d00,0x575e00,
                          0x22ae00,0x565800};
   static DSPFixup _fixupsP[] = {
   {DSP_LC_P, NULL, 1 /* decrement */, 7 /* refOffset */,  15 /* relAddress */}
   };
   _leafUGStruct.master = NULL;
   _leafUGStruct.argSpaces = _argSpaces;
   _leafUGStruct.data[(int)DSP_LC_P] = &_dataRecP;
   _dataRecP.data = _dataP;
   _leafUGStruct.fixups[(int)DSP_LC_P - (int)DSP_LC_P_BASE] = _fixupsP;
   MKInitUnitGeneratorClass(&_leafUGStruct);
   _leafUGStruct.reserved1 = MK_2COMPUTETIMES;
   _leafUGStruct.offChipComputeTime = OFFCHIP_COMPUTETIME;
   return self;
}
@end
