#
#  NeXT AP Library Makefile
#  Copyright 1989, NeXT, Inc.
#
#  05/01/89/jos - created from /usr/lib/Makefiles/Makefile.lib.user
#  05/30/89/mtm - now calls apsrc Makefile
#  07/12/89/mtm - fixed arrayproc.h install bug
#  07/23/89/mtm - rm libarrayproc.a before make inst_product
#		  Put DSPAPUtilities last in library.
#		  Put included makefiles in current dir.
#  08/04/89/mtm - Revised
#  04/18/90/mtm - added ./ in after cd's.
#  08/14/90/mtm	- added -O to PROFILE_CFLAGS.
#
NAME = arrayproc
SOURCE_DIR = src/lib

# Library products
OPT_LIB = lib$(NAME).a
DEBUG_LIB = lib$(NAME)_g.a
PROFILE_LIB = lib$(NAME)_p.a
PRODUCT = $(OPT_LIB)
PRODUCTS = $(OPT_LIB) $(DEBUG_LIB) $(PROFILE_LIB)
DERIVED_LIBS = $(PRODUCTS)

# Flags passed to ar
ARFLAGS = ruv

# Place where .o and .c files are kept
OFILE_DIR = obj
DEBUG_OFILE_DIR = debug_obj
PROFILE_OFILE_DIR = profile_obj
CFILE_DIR = .
DERIVED_DIRS = $(OFILE_DIR) $(DEBUG_OFILE_DIR) $(PROFILE_OFILE_DIR)
LEAN_GARBAGE = $(DERIVED_DIRS) $(VERSFILE).c

# Array processing interface functions (.c) directory
APSRC_CFILES_DIR = ./../../apcsrc

# For invoking apsrc make
NESTED_DIRS = ../../apsrc
NESTED_TARGET = local_install

# Places to look for files
VPATH = $(OFILE_DIR):$(APSRC_CFILES_DIR)

# Install stuff
INSTALL_LIB_DIR = $(DSTROOT)/usr/lib
PRECIOUS_INSTALL_DIRS = $(INSTALL_LIB_DIR)
INSTALLSRC_FILES = $(LOCAL_CFILES) Makefile README

# Compiler flags
DSP_LIB_DIR = /Net/marvin/ds/dspdev/dsp_proj/dsp/src/lib
#DEBUG_CFLAGS = $(BASE_CFLAGS) -g -I$(DSP_LIB_DIR)
DEBUG_CFLAGS = $(BASE_CFLAGS) -g
PROFILE_CFLAGS = $(BASE_CFLAGS) -O -pg

# Include the ap macro names
MACRO_PREFIX = DSPAP
include ../../Makefile.macros

# Files
APSRC_CFILES = $(AP_MACROS:=.c)
LOCAL_CFILES = DSPAPSinCos.c DSPAPLoadGo.c DSPAPUtilities.c 
LOCAL_OFILES = $(LOCAL_CFILES:.c=.o)
APSRC_OFILES = $(APSRC_CFILES:.c=.o)

# File generated by vers_string
VERSFILE = $(NAME)_vers
VERSFLAGS = -l

# Include the common makefile
include ../../Makefile.common

# Rule to make a .o from a .c
.c.o:
	$(CC) $(CFLAGS) -c $(CFILE_DIR)/$*.c -o $(OFILE_DIR)/$*.o

# Targets
# All makes optimized, debug, and profile libs
all $(NAME):: opt debug profile

opt debug_lib profile_lib: make_ofile_dir apsrc_ofiles $(PRODUCT)

# OFILE_DIR cannot be target because PRODUCT has a dependency on it
make_ofile_dir:
	mkdirs -m 755 $(OFILE_DIR)

# Create apcsrc ofiles
apsrc_ofiles: $(APSRC_CFILES_DIR)
	$(MAKE) $(APSRC_OFILES) "CFILE_DIR = $(APSRC_CFILES_DIR)" \
		"OFILE_DIR = $(OFILE_DIR)" "CFLAGS = $(CFLAGS)"

# Invoke apsrc make only if cfiles dir does not exist
$(APSRC_CFILES_DIR):
	$(MAKE) nested

# Create lib only if new files in ofile dir.
# Must remove lib first because of ar bug.
# Must do two ar's because APSRC_OFILES don't get VPATH prepended.
$(PRODUCT): $(OFILE_DIR) $(LOCAL_OFILES) $(VERSFILE).o
	/bin/rm -f $(PRODUCT)
	(cd ./$(OFILE_DIR); \
		$(AR) $(ARFLAGS) ../$(PRODUCT) $(APSRC_OFILES))
	$(AR) $(ARFLAGS) $(PRODUCT) $(LOCAL_OFILES) $(VERSFILE).o
	ranlib $(PRODUCT)

# Make version file
$(VERSFILE).c:
	vers_string $(VERSFLAGS) $(PRODUCT) > $@

# Local install makes a debug version of the library
local_install debug:
	$(MAKE) debug_lib "PRODUCT = $(DEBUG_LIB)" \
		"OFILE_DIR = $(DEBUG_OFILE_DIR)" \
		"CFLAGS = $(DEBUG_CFLAGS) -DDEBUG"

profile:
	$(MAKE) profile_lib "PRODUCT = $(PROFILE_LIB)" \
		"OFILE_DIR = $(PROFILE_OFILE_DIR)" \
		"CFLAGS = $(PROFILE_CFLAGS)"

# Install optimized library
opt_install: opt $(PRECIOUS_INSTALL_DIRS)
	install $(IFLAGS) -r -m 444 $(OPT_LIB) $(INSTALL_LIB_DIR)

# Install profile library
profile_install: profile $(PRECIOUS_INSTALL_DIRS)
	install $(IFLAGS) -r -m 444 $(PROFILE_LIB) $(INSTALL_LIB_DIR)

# Install optimized and profile libraries
install: opt_install profile_install
	echo 'make install done for ap/src/lib'

$(PRECIOUS_INSTALL_DIRS):
	mkdirs -m 755 $(PRECIOUS_INSTALL_DIRS)

